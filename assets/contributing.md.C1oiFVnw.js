import{_ as a,c as t,ag as o,o as r}from"./chunks/framework.CB8iguzh.js";const u=JSON.parse('{"title":"Contributing Guide","description":"","frontmatter":{},"headers":[],"relativePath":"contributing.md","filePath":"contributing.md","lastUpdated":null}'),i={name:"contributing.md"};function n(s,e,l,d,c,h){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="contributing-guide" tabindex="-1">Contributing Guide <a class="header-anchor" href="#contributing-guide" aria-label="Permalink to &quot;Contributing Guide&quot;">‚Äã</a></h1><p>Thanks for wanting to help out with nvim-orgmode, we appreciate the effort!</p><ul><li><a href="#reporting-bugsfeatures">Reporting Bugs/Features</a></li><li><a href="#documentation">Documentation</a></li><li><a href="#development">Development</a><ul><li><a href="#philosophy">Philosophy</a></li><li><a href="#local-dev">Local dev</a></li><li><a href="#code">Code</a><ul><li><a href="#tests">Tests</a></li><li><a href="#parser">Parser</a></li></ul></li></ul></li></ul><h2 id="reporting-bugsfeatures" tabindex="-1">Reporting Bugs/Features <a class="header-anchor" href="#reporting-bugsfeatures" aria-label="Permalink to &quot;Reporting Bugs/Features&quot;">‚Äã</a></h2><p>üì£ Please always make a quick search in our <a href="https://github.com/nvim-orgmode/orgmode/issues" target="_blank" rel="noreferrer">issue-tracker</a> before reporting anything. If the bug/feature has already been reported, continue the conversation on the existing issue.</p><p>We distinguish between <code>core</code> (part of <a href="https://orgmode.org/" target="_blank" rel="noreferrer">orgmode</a>) and <code>non-core</code> features. The former will be prioritized. Bugs get the highest priority.</p><p>If you&#39;re reporting a <code>core</code> feature, please be sure to provide a link that describes it. There are several places where features could be documented, have a look at these <a href="https://orgmode.org/worg/#resources" target="_blank" rel="noreferrer">resources</a>. The more info you provide the better!</p><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">‚Äã</a></h2><p>If you spot something missing in our <a href="./">docs</a>, don&#39;t hesitate making a PR. The <a href="https://github.com/nvim-orgmode/orgmode/wiki" target="_blank" rel="noreferrer">wiki</a> can be edited freely.</p><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to &quot;Development&quot;">‚Äã</a></h2><h3 id="philosophy" tabindex="-1">Philosophy <a class="header-anchor" href="#philosophy" aria-label="Permalink to &quot;Philosophy&quot;">‚Äã</a></h3><p>We try to mimic the behavior of Emacs Orgmode as closely as possible. Variable names follow the same naming convention as in Emacs Orgmode, except that they are in <code>snake_case</code> instead of <code>kebab-case</code>.</p><p>Example: <code>org-agenda-files</code> in Emacs is <code>org_agenda_files</code> in nvim-orgmode.</p><h3 id="local-dev" tabindex="-1">Local dev <a class="header-anchor" href="#local-dev" aria-label="Permalink to &quot;Local dev&quot;">‚Äã</a></h3><p>Requirements:</p><ul><li><a href="https://github.com/JohnnyMorganz/StyLua" target="_blank" rel="noreferrer">StyLua</a> - For formatting</li></ul><p>To set up local development, run <code>make setup_dev</code>. This will add a pre-commit hook that will auto format all files before committing them. You can always manually format all files with <code>make format</code> command</p><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">‚Äã</a></h3><p>If you prefer working on an issue that has been reported, please leave a comment voicing your interest.</p><p>Please document any new code you add with <a href="https://emmylua.github.io/annotation.html" target="_blank" rel="noreferrer">emmylua annotations</a>. Feel free to add annotations/docs to any existing functions integral to your PR that are missing them.</p><h4 id="tests" tabindex="-1">Tests <a class="header-anchor" href="#tests" aria-label="Permalink to &quot;Tests&quot;">‚Äã</a></h4><p>To run tests run <code>make test</code> in the nvim-orgmode directory:</p><div class="language-example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make test</span></span></code></pre></div><p>To run a specific test you can set a <code>FILE</code> environment variable to a specific spec you want to test. Example:</p><div class="language-example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make test FILE=./tests/plenary/api/api_spec.lua</span></span></code></pre></div><p>üìù NOTE: Tests are currently not working on Windows. Test run will only verify if tree-sitter grammar can be installed, and exit with a success message.</p><h4 id="parser" tabindex="-1">Parser <a class="header-anchor" href="#parser" aria-label="Permalink to &quot;Parser&quot;">‚Äã</a></h4><p>Parsing is done via builtin treesitter parser and the <a href="https://github.com/nvim-orgmode/tree-sitter-org" target="_blank" rel="noreferrer">tree-sitter-org</a> grammar.</p><h4 id="commits" tabindex="-1">Commits <a class="header-anchor" href="#commits" aria-label="Permalink to &quot;Commits&quot;">‚Äã</a></h4><p>Ensure that you follow the <a href="https://www.conventionalcommits.org/" target="_blank" rel="noreferrer">Conventional Commits</a> specification (e.g., <code>feat: add new feature</code>, <code>fix: correct bug</code>, <code>docs: update documentation</code>).</p>',30)]))}const m=a(i,[["render",n]]);export{u as __pageData,m as default};
